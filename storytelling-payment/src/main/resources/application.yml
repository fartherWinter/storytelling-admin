# 支付服务配置
server:
  port: 8084
  servlet:
    context-path: /payment

spring:
  application:
    name: storytelling-payment
  profiles:
    active: dev
  
  # 数据源配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/storytelling_payment?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
    username: root
    password: 123456
    druid:
      initial-size: 5
      min-idle: 5
      max-active: 20
      max-wait: 60000
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      filters: stat,wall,slf4j
      connection-properties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
      web-stat-filter:
        enabled: true
        url-pattern: "/*"
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"
      stat-view-servlet:
        enabled: true
        url-pattern: "/druid/*"
        login-username: admin
        login-password: 123456

  # Redis配置
  redis:
    host: localhost
    port: 6379
    password: 
    database: 4
    timeout: 10000ms
    lettuce:
      pool:
        max-active: 8
        max-wait: -1ms
        max-idle: 8
        min-idle: 0

  # JPA配置
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true

  # RabbitMQ配置
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    virtual-host: /
    connection-timeout: 15000
    publisher-confirms: true
    publisher-returns: true
    template:
      mandatory: true
    listener:
      simple:
        acknowledge-mode: manual
        retry:
          enabled: true
          max-attempts: 3
          initial-interval: 1000

  # Nacos配置
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
        namespace: storytelling
        group: DEFAULT_GROUP
        service: ${spring.application.name}
        metadata:
          version: 1.0.0
          region: cn-hangzhou
      config:
        server-addr: localhost:8848
        namespace: storytelling
        group: DEFAULT_GROUP
        file-extension: yml
        shared-configs:
          - data-id: common-config.yml
            group: DEFAULT_GROUP
            refresh: true

# MyBatis Plus配置
mybatis-plus:
  mapper-locations: classpath*:/mapper/**/*.xml
  type-aliases-package: com.chennian.storytelling.payment.entity
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    call-setters-on-nulls: true
    jdbc-type-for-null: 'null'
  global-config:
    db-config:
      id-type: ASSIGN_ID
      logic-delete-field: deleted
      logic-delete-value: 1
      logic-not-delete-value: 0
      update-strategy: NOT_NULL
      insert-strategy: NOT_NULL
      select-strategy: NOT_EMPTY

# Sa-Token配置
sa-token:
  token-name: satoken
  timeout: 2592000
  activity-timeout: -1
  is-concurrent: true
  is-share: true
  token-style: uuid
  is-log: false

# Redisson配置
redisson:
  config: |
    singleServerConfig:
      address: "redis://localhost:6379"
      database: 4
      connectionMinimumIdleSize: 8
      connectionPoolSize: 32
      idleConnectionTimeout: 10000
      connectTimeout: 10000
      timeout: 3000
      retryAttempts: 3
      retryInterval: 1500

# 日志配置
logging:
  level:
    com.chennian.storytelling.payment: INFO
    org.springframework.web: INFO
    org.springframework.security: INFO
    org.springframework.transaction: INFO
    com.alibaba.nacos: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"
  file:
    name: logs/storytelling-payment.log
    max-size: 100MB
    max-history: 30

# 管理端点配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# OpenAPI文档配置
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  info:
    title: 故事叙述平台支付服务API
    description: 提供支付订单管理、支付渠道配置、退款处理等功能
    version: 1.0.0
    contact:
      name: 开发团队
      email: dev@storytelling.com

# 业务配置
payment:
  # 支付配置
  order:
    timeout: 30 # 支付超时时间（分钟）
    retry-times: 3 # 重试次数
    retry-interval: 5000 # 重试间隔（毫秒）
  
  # 退款配置
  refund:
    timeout: 24 # 退款超时时间（小时）
    auto-audit: false # 是否自动审核
    audit-amount-limit: 1000 # 自动审核金额限制
  
  # 通知配置
  notify:
    retry-times: 5 # 通知重试次数
    retry-interval: 30000 # 通知重试间隔（毫秒）
    timeout: 10000 # 通知超时时间（毫秒）
  
  # 缓存配置
  cache:
    channel-expire: 3600 # 渠道缓存过期时间（秒）
    order-expire: 1800 # 订单缓存过期时间（秒）
    prefix: "payment:" # 缓存前缀
  
  # 消息队列配置
  mq:
    exchange: payment.exchange
    queue:
      payment-notify: payment.notify.queue
      refund-notify: refund.notify.queue
      order-timeout: order.timeout.queue
    routing-key:
      payment-notify: payment.notify
      refund-notify: refund.notify
      order-timeout: order.timeout
  
  # 定时任务配置
  schedule:
    timeout-order-cron: "0 */5 * * * ?" # 每5分钟检查超时订单
    sync-status-cron: "0 */10 * * * ?" # 每10分钟同步状态
    clean-record-cron: "0 0 2 * * ?" # 每天凌晨2点清理记录
  
  # 支付渠道配置
  channels:
    # 支付宝配置
    alipay:
      enabled: true
      sandbox: true
      app-id: "your_app_id"
      private-key: "your_private_key"
      public-key: "alipay_public_key"
      gateway-url: "https://openapi.alipaydev.com/gateway.do"
      sign-type: "RSA2"
      charset: "UTF-8"
      format: "JSON"
      timeout: 30000
    
    # 微信支付配置
    wechat:
      enabled: true
      sandbox: true
      app-id: "your_app_id"
      mch-id: "your_mch_id"
      api-key: "your_api_key"
      cert-path: "classpath:cert/wechat/apiclient_cert.p12"
      gateway-url: "https://api.mch.weixin.qq.com"
      timeout: 30000
    
    # 银联支付配置
    unionpay:
      enabled: false
      sandbox: true
      mer-id: "your_mer_id"
      cert-path: "classpath:cert/unionpay/"
      gateway-url: "https://gateway.test.95516.com"
      timeout: 30000

# Feign配置
feign:
  hystrix:
    enabled: true
  compression:
    request:
      enabled: true
    response:
      enabled: true
  client:
    config:
      default:
        connect-timeout: 5000
        read-timeout: 10000
        logger-level: basic

# Hystrix配置
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeout-in-milliseconds: 10000
      circuit-breaker:
        enabled: true
        request-volume-threshold: 20
        failure-ratio-threshold: 50
        sleep-window-in-milliseconds: 5000

# 线程池配置
thread-pool:
  core-size: 10
  max-size: 20
  queue-capacity: 200
  keep-alive-seconds: 60
  thread-name-prefix: "payment-async-"

# 监控配置
monitoring:
  enabled: true
  slow-sql-threshold: 2000 # 慢SQL阈值（毫秒）
  slow-operation-threshold: 5000 # 慢操作阈值（毫秒）
  alert:
    enabled: true
    webhook-url: "https://your-webhook-url"
    error-rate-threshold: 5 # 错误率阈值（%）
    response-time-threshold: 3000 # 响应时间阈值（毫秒）