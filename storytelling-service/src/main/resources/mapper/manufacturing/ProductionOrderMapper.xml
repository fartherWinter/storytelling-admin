<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chennian.storytelling.dao.manufacturing.ProductionOrderMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.chennian.storytelling.bean.model.manufacturing.ProductionOrder">
        <id column="order_id" property="orderId" />
        <result column="order_code" property="orderCode" />
        <result column="order_name" property="orderName" />
        <result column="plan_id" property="planId" />
        <result column="plan_code" property="planCode" />
        <result column="product_id" property="productId" />
        <result column="product_name" property="productName" />
        <result column="product_spec" property="productSpec" />
        <result column="order_quantity" property="orderQuantity" />
        <result column="completed_quantity" property="completedQuantity" />
        <result column="qualified_quantity" property="qualifiedQuantity" />
        <result column="unqualified_quantity" property="unqualifiedQuantity" />
        <result column="plan_start_time" property="planStartTime" />
        <result column="plan_end_time" property="planEndTime" />
        <result column="actual_start_time" property="actualStartTime" />
        <result column="actual_end_time" property="actualEndTime" />
        <result column="order_status" property="orderStatus" />
        <result column="priority" property="priority" />
        <result column="production_line_id" property="productionLineId" />
        <result column="production_line_name" property="productionLineName" />
        <result column="manager_id" property="managerId" />
        <result column="manager_name" property="managerName" />
        <result column="plan_cost" property="planCost" />
        <result column="actual_cost" property="actualCost" />
        <result column="progress" property="progress" />
        <result column="pause_reason" property="pauseReason" />
        <result column="pause_time" property="pauseTime" />
        <result column="quality_requirement" property="qualityRequirement" />
        <result column="process_requirement" property="processRequirement" />
        <result column="description" property="description" />
        <result column="remark" property="remark" />
        <result column="create_by" property="createBy" />
        <result column="create_time" property="createTime" />
        <result column="update_by" property="updateBy" />
        <result column="update_time" property="updateTime" />
        <result column="del_flag" property="delFlag" />
    </resultMap>

    <!-- 开工生产订单 -->
    <update id="startOrder">
        UPDATE production_order
        SET order_status = 1,
            actual_start_date = NOW(),
            update_time = NOW()
        WHERE order_id = #{id}
    </update>

    <!-- 暂停生产订单 -->
    <update id="pauseOrder">
        UPDATE production_order
        SET order_status = 2,
            update_time = NOW()
        WHERE order_id = #{id}
    </update>
    
    <!-- 更新订单状态 -->
    <update id="updateOrderStatus">
        UPDATE production_order
        SET order_status = #{status},
            update_time = NOW()
        WHERE order_id = #{orderId}
    </update>
    
    <!-- 根据生产计划ID查询订单列表 -->
    <select id="selectByPlanId" resultMap="BaseResultMap">
        SELECT * FROM production_order 
        WHERE production_plan_id = #{planId}
        ORDER BY priority DESC, create_time
    </select>
    
    <!-- 根据产品ID查询订单列表 -->
    <select id="selectByProductId" resultMap="BaseResultMap">
        SELECT * FROM production_order 
        WHERE product_id = #{productId}
        ORDER BY create_time DESC
    </select>
    
    <!-- 查询生产统计数据 -->
    <select id="selectProductionStatisticsData" resultType="java.util.Map">
        SELECT 
            COUNT(*) as totalOrders,
            COUNT(CASE WHEN order_status = 0 THEN 1 END) as pendingOrders,
            COUNT(CASE WHEN order_status = 1 THEN 1 END) as inProgressOrders,
            COUNT(CASE WHEN order_status = 2 THEN 1 END) as pausedOrders,
            COUNT(CASE WHEN order_status = 3 THEN 1 END) as completedOrders,
            SUM(planned_quantity) as totalPlanned,
            SUM(completed_quantity) as totalCompleted,
            SUM(qualified_quantity) as totalQualified,
            ROUND(SUM(completed_quantity) * 100.0 / NULLIF(SUM(planned_quantity), 0), 2) as completionRate,
            ROUND(SUM(qualified_quantity) * 100.0 / NULLIF(SUM(completed_quantity), 0), 2) as qualityRate,
            COUNT(CASE WHEN actual_end_date &lt;= end_date THEN 1 END) as onTimeOrders,
            ROUND(COUNT(CASE WHEN actual_end_date &lt;= end_date THEN 1 END) * 100.0 / NULLIF(COUNT(CASE WHEN actual_end_date IS NOT NULL THEN 1 END), 0), 2) as onTimeRate
        FROM production_order
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND start_date &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND end_date &lt;= #{endDate}
        </if>
        <if test="productId != null">
            AND product_id = #{productId}
        </if>
        <if test="lineId != null">
            AND production_line_id = #{lineId}
        </if>
    </select>

    <!-- 查询生产统计数据 -->
    <select id="selectProductionStatistics" resultType="java.util.Map">
        <choose>
            <!-- 按日期维度统计 -->
            <when test="dimension == 'date'">
                SELECT 
                    DATE(create_time) as dimension,
                    COUNT(*) as total_orders,
                    COUNT(CASE WHEN order_status = 0 THEN 1 END) as pending_orders,
                    COUNT(CASE WHEN order_status = 1 THEN 1 END) as in_progress_orders,
                    COUNT(CASE WHEN order_status = 2 THEN 1 END) as paused_orders,
                    COUNT(CASE WHEN order_status = 3 THEN 1 END) as completed_orders,
                    SUM(order_quantity) as total_planned,
                    SUM(completed_quantity) as total_completed,
                    SUM(qualified_quantity) as total_qualified,
                    ROUND(SUM(completed_quantity) * 100.0 / NULLIF(SUM(order_quantity), 0), 2) as completion_rate,
                    ROUND(SUM(qualified_quantity) * 100.0 / NULLIF(SUM(completed_quantity), 0), 2) as quality_rate
                FROM production_order
                WHERE 1=1
                <if test="startDate != null and startDate != ''">
                    AND DATE(create_time) &gt;= #{startDate}
                </if>
                <if test="endDate != null and endDate != ''">
                    AND DATE(create_time) &lt;= #{endDate}
                </if>
                GROUP BY DATE(create_time)
                ORDER BY DATE(create_time)
            </when>
            <!-- 按产品维度统计 -->
            <when test="dimension == 'product'">
                SELECT 
                    product_name as dimension,
                    COUNT(*) as total_orders,
                    COUNT(CASE WHEN order_status = 0 THEN 1 END) as pending_orders,
                    COUNT(CASE WHEN order_status = 1 THEN 1 END) as in_progress_orders,
                    COUNT(CASE WHEN order_status = 2 THEN 1 END) as paused_orders,
                    COUNT(CASE WHEN order_status = 3 THEN 1 END) as completed_orders,
                    SUM(order_quantity) as total_planned,
                    SUM(completed_quantity) as total_completed,
                    SUM(qualified_quantity) as total_qualified,
                    ROUND(SUM(completed_quantity) * 100.0 / NULLIF(SUM(order_quantity), 0), 2) as completion_rate,
                    ROUND(SUM(qualified_quantity) * 100.0 / NULLIF(SUM(completed_quantity), 0), 2) as quality_rate
                FROM production_order
                WHERE 1=1
                <if test="startDate != null and startDate != ''">
                    AND plan_start_time &gt;= #{startDate}
                </if>
                <if test="endDate != null and endDate != ''">
                    AND plan_end_time &lt;= #{endDate}
                </if>
                GROUP BY product_id, product_name
                ORDER BY product_name
            </when>
            <!-- 按生产线维度统计 -->
            <when test="dimension == 'line'">
                SELECT 
                    production_line_name as dimension,
                    COUNT(*) as total_orders,
                    COUNT(CASE WHEN order_status = 0 THEN 1 END) as pending_orders,
                    COUNT(CASE WHEN order_status = 1 THEN 1 END) as in_progress_orders,
                    COUNT(CASE WHEN order_status = 2 THEN 1 END) as paused_orders,
                    COUNT(CASE WHEN order_status = 3 THEN 1 END) as completed_orders,
                    SUM(order_quantity) as total_planned,
                    SUM(completed_quantity) as total_completed,
                    SUM(qualified_quantity) as total_qualified,
                    ROUND(SUM(completed_quantity) * 100.0 / NULLIF(SUM(order_quantity), 0), 2) as completion_rate,
                    ROUND(SUM(qualified_quantity) * 100.0 / NULLIF(SUM(completed_quantity), 0), 2) as quality_rate,
                    ROUND(SUM(actual_cost) / NULLIF(SUM(plan_cost), 0), 2) as cost_efficiency
                FROM production_order
                WHERE 1=1
                <if test="startDate != null and startDate != ''">
                    AND plan_start_time &gt;= #{startDate}
                </if>
                <if test="endDate != null and endDate != ''">
                    AND plan_end_time &lt;= #{endDate}
                </if>
                GROUP BY production_line_id, production_line_name
                ORDER BY production_line_name
            </when>
            <!-- 按状态维度统计 -->
            <when test="dimension == 'status'">
                SELECT 
                    CASE order_status 
                        WHEN 0 THEN '待开始'
                        WHEN 1 THEN '进行中'
                        WHEN 2 THEN '暂停'
                        WHEN 3 THEN '已完成'
                        ELSE '未知状态'
                    END as dimension,
                    COUNT(*) as total_orders,
                    SUM(order_quantity) as total_planned,
                    SUM(completed_quantity) as total_completed,
                    SUM(qualified_quantity) as total_qualified,
                    ROUND(SUM(completed_quantity) * 100.0 / NULLIF(SUM(order_quantity), 0), 2) as completion_rate,
                    ROUND(SUM(qualified_quantity) * 100.0 / NULLIF(SUM(completed_quantity), 0), 2) as quality_rate,
                    ROUND(AVG(progress), 2) as avg_progress
                FROM production_order
                WHERE 1=1
                <if test="startDate != null and startDate != ''">
                    AND plan_start_time &gt;= #{startDate}
                </if>
                <if test="endDate != null and endDate != ''">
                    AND plan_end_time &lt;= #{endDate}
                </if>
                GROUP BY order_status
                ORDER BY order_status
            </when>
            <!-- 默认总体统计 -->
            <otherwise>
                SELECT 
                    '总体统计' as dimension,
                    COUNT(*) as total_orders,
                    COUNT(CASE WHEN order_status = 0 THEN 1 END) as pending_orders,
                    COUNT(CASE WHEN order_status = 1 THEN 1 END) as in_progress_orders,
                    COUNT(CASE WHEN order_status = 2 THEN 1 END) as paused_orders,
                    COUNT(CASE WHEN order_status = 3 THEN 1 END) as completed_orders,
                    SUM(order_quantity) as total_planned,
                    SUM(completed_quantity) as total_completed,
                    SUM(qualified_quantity) as total_qualified,
                    ROUND(SUM(completed_quantity) * 100.0 / NULLIF(SUM(order_quantity), 0), 2) as completion_rate,
                    ROUND(SUM(qualified_quantity) * 100.0 / NULLIF(SUM(completed_quantity), 0), 2) as quality_rate,
                    COUNT(CASE WHEN actual_end_time IS NOT NULL AND actual_end_time &lt;= plan_end_time THEN 1 END) as on_time_orders,
                    ROUND(COUNT(CASE WHEN actual_end_time IS NOT NULL AND actual_end_time &lt;= plan_end_time THEN 1 END) * 100.0 / NULLIF(COUNT(CASE WHEN actual_end_time IS NOT NULL THEN 1 END), 0), 2) as on_time_rate,
                    ROUND(SUM(actual_cost) / NULLIF(SUM(plan_cost), 0), 2) as cost_efficiency
                FROM production_order
                WHERE 1=1
                <if test="startDate != null and startDate != ''">
                    AND plan_start_time &gt;= #{startDate}
                </if>
                <if test="endDate != null and endDate != ''">
                    AND plan_end_time &lt;= #{endDate}
                </if>
            </otherwise>
        </choose>
    </select>

    <!-- 查询生产效率数据 -->
    <select id="selectProductionEfficiencyData" resultType="java.util.Map">
        SELECT 
            pl.id as lineId,
            pl.line_name as lineName,
            COUNT(po.id) as orderCount,
            SUM(po.planned_quantity) as totalPlanned,
            SUM(po.completed_quantity) as totalCompleted,
            SUM(po.qualified_quantity) as totalQualified,
            ROUND(SUM(po.completed_quantity) * 100.0 / NULLIF(SUM(po.planned_quantity), 0), 2) as efficiency,
            ROUND(SUM(po.qualified_quantity) * 100.0 / NULLIF(SUM(po.completed_quantity), 0), 2) as qualityRate,
            AVG(CASE WHEN po.actual_end_date IS NOT NULL AND po.actual_start_date IS NOT NULL 
                THEN TIMESTAMPDIFF(DAY, po.actual_start_date, po.actual_end_date) 
                ELSE NULL END) as avgCycleTime,
            COUNT(CASE WHEN po.actual_end_date &lt;= po.end_date THEN 1 END) as onTimeCount,
            ROUND(COUNT(CASE WHEN po.actual_end_date &lt;= po.end_date THEN 1 END) * 100.0 / NULLIF(COUNT(po.id), 0), 2) as onTimeRate
        FROM production_order po
        LEFT JOIN production_line pl ON po.production_line_id = pl.id
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND po.start_date &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND po.end_date &lt;= #{endDate}
        </if>
        <if test="lineId != null">
            AND po.production_line_id = #{lineId}
        </if>
        GROUP BY pl.id, pl.line_name
        ORDER BY efficiency DESC
    </select>
    
    <!-- 查询生产趋势数据 -->
    <select id="selectProductionTrendData" resultType="java.util.Map">
        SELECT 
            <choose>
                <when test="granularity == 'day'">
                    DATE(start_date) as period
                </when>
                <when test="granularity == 'week'">
                    CONCAT(YEAR(start_date), '-W', WEEK(start_date)) as period
                </when>
                <when test="granularity == 'month'">
                    DATE_FORMAT(start_date, '%Y-%m') as period
                </when>
                <otherwise>
                    DATE_FORMAT(start_date, '%Y-%m') as period
                </otherwise>
            </choose>,
            COUNT(*) as orderCount,
            SUM(planned_quantity) as totalPlanned,
            SUM(completed_quantity) as totalCompleted,
            SUM(qualified_quantity) as totalQualified,
            ROUND(SUM(completed_quantity) * 100.0 / NULLIF(SUM(planned_quantity), 0), 2) as completionRate,
            ROUND(SUM(qualified_quantity) * 100.0 / NULLIF(SUM(completed_quantity), 0), 2) as qualityRate
        FROM production_order
        WHERE 1=1
        <if test="period != null and period != ''">
            <choose>
                <when test="period == 'last_7_days'">
                    AND start_date &gt;= DATE_SUB(NOW(), INTERVAL 7 DAY)
                </when>
                <when test="period == 'last_30_days'">
                    AND start_date &gt;= DATE_SUB(NOW(), INTERVAL 30 DAY)
                </when>
                <when test="period == 'last_90_days'">
                    AND start_date &gt;= DATE_SUB(NOW(), INTERVAL 90 DAY)
                </when>
                <when test="period == 'this_year'">
                    AND YEAR(start_date) = YEAR(NOW())
                </when>
            </choose>
        </if>
        GROUP BY period
        ORDER BY period
    </select>
    
    <!-- 查询订单统计信息 -->
    <select id="selectOrderStatistics" resultType="java.util.Map">
        SELECT 
            COUNT(*) as totalOrders,
            COUNT(CASE WHEN order_status = 0 THEN 1 END) as pendingOrders,
            COUNT(CASE WHEN order_status = 1 THEN 1 END) as inProgressOrders,
            COUNT(CASE WHEN order_status = 2 THEN 1 END) as pausedOrders,
            COUNT(CASE WHEN order_status = 3 THEN 1 END) as completedOrders,
            COUNT(DISTINCT product_id) as productCount,
            COUNT(DISTINCT production_line_id) as lineCount,
            SUM(planned_quantity) as totalPlannedQuantity,
            SUM(completed_quantity) as totalCompletedQuantity,
            SUM(qualified_quantity) as totalQualifiedQuantity,
            AVG(planned_quantity) as avgPlannedQuantity,
            AVG(completed_quantity) as avgCompletedQuantity,
            ROUND(SUM(completed_quantity) * 100.0 / NULLIF(SUM(planned_quantity), 0), 2) as overallCompletionRate,
            ROUND(SUM(qualified_quantity) * 100.0 / NULLIF(SUM(completed_quantity), 0), 2) as overallQualityRate
        FROM production_order
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND start_date &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND end_date &lt;= #{endDate}
        </if>
    </select>

    <!-- 获取客户服务数据 -->
    <select id="selectCustomerServiceData" resultType="java.util.Map">
        SELECT 
            COUNT(*) as totalOrders,
            SUM(CASE WHEN order_status = 3 THEN 1 ELSE 0 END) as completedOrders,
            SUM(CASE WHEN actual_end_date &lt;= end_date THEN 1 ELSE 0 END) as onTimeOrders,
            AVG(CASE WHEN actual_end_date IS NOT NULL AND actual_start_date IS NOT NULL 
                THEN TIMESTAMPDIFF(DAY, actual_start_date, actual_end_date) 
                ELSE NULL END) as avgDeliveryTime,
            AVG(CASE WHEN qualified_quantity > 0 AND completed_quantity > 0 
                THEN (qualified_quantity * 100.0 / completed_quantity) 
                ELSE 0 END) as avgQualityRate
        FROM production_order po
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND po.start_date &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND po.end_date &lt;= #{endDate}
        </if>
        <if test="customerId != null">
            AND EXISTS (
                SELECT 1 FROM sales_order so 
                WHERE so.id = po.sales_order_id 
                AND so.customer_id = #{customerId}
            )
        </if>
    </select>

    <!-- 获取市场数据 -->
    <select id="selectMarketData" resultType="java.util.Map">
        SELECT 
            p.name as productName,
            p.id as productId,
            COUNT(po.id) as orderCount,
            SUM(po.planned_quantity) as totalDemand,
            SUM(po.completed_quantity) as totalSupply,
            AVG(CASE WHEN po.completed_quantity > 0 AND po.planned_quantity > 0 
                THEN (po.completed_quantity * 100.0 / po.planned_quantity) 
                ELSE 0 END) as fulfillmentRate,
            SUM(CASE WHEN po.actual_end_date &lt;= po.end_date THEN 1 ELSE 0 END) as onTimeDeliveries
        FROM production_order po
        INNER JOIN product p ON po.product_id = p.id
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND po.start_date &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND po.end_date &lt;= #{endDate}
        </if>
        <if test="productId != null">
            AND po.product_id = #{productId}
        </if>
        GROUP BY p.id, p.name
        ORDER BY totalDemand DESC
    </select>

    <!-- 获取生产报表数据 -->
    <select id="selectProductionReportData" resultType="java.util.Map">
        SELECT 
            po.order_code,
            po.order_name,
            p.name as productName,
            pl.line_name as productionLineName,
            po.planned_quantity,
            po.completed_quantity,
            po.qualified_quantity,
            po.start_date,
            po.end_date,
            po.actual_start_date,
            po.actual_end_date,
            CASE po.order_status
                WHEN 0 THEN '待开工'
                WHEN 1 THEN '进行中'
                WHEN 2 THEN '暂停'
                WHEN 3 THEN '已完成'
                ELSE '未知'
            END as statusName,
            CASE WHEN po.completed_quantity > 0 AND po.planned_quantity > 0 
                THEN ROUND((po.completed_quantity * 100.0 / po.planned_quantity), 2) 
                ELSE 0 END as completionRate,
            CASE WHEN po.qualified_quantity > 0 AND po.completed_quantity > 0 
                THEN ROUND((po.qualified_quantity * 100.0 / po.completed_quantity), 2) 
                ELSE 0 END as qualityRate
        FROM production_order po
        LEFT JOIN product p ON po.product_id = p.id
        LEFT JOIN production_line pl ON po.production_line_id = pl.id
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND po.start_date &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND po.end_date &lt;= #{endDate}
        </if>
        ORDER BY po.create_time DESC
    </select>

    <!-- 查询生产趋势数据 -->
    <select id="selectProductionTrends" resultType="java.util.Map">
        SELECT 
            DATE_FORMAT(po.create_time, '%Y-%m') as month,
            COUNT(po.id) as totalOrders,
            SUM(po.planned_quantity) as totalPlanned,
            SUM(po.completed_quantity) as totalCompleted,
            SUM(po.qualified_quantity) as totalQualified,
            ROUND(SUM(po.completed_quantity) * 100.0 / NULLIF(SUM(po.planned_quantity), 0), 2) as completionRate,
            ROUND(SUM(po.qualified_quantity) * 100.0 / NULLIF(SUM(po.completed_quantity), 0), 2) as qualificationRate,
            AVG(CASE WHEN po.actual_end_date IS NOT NULL AND po.actual_start_date IS NOT NULL 
                THEN DATEDIFF(po.actual_end_date, po.actual_start_date) 
                ELSE NULL END) as avgProductionDays
        FROM production_order po
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND po.create_time &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND po.create_time &lt;= #{endDate}
        </if>
        <if test="productId != null">
            AND po.product_id = #{productId}
        </if>
        GROUP BY DATE_FORMAT(po.create_time, '%Y-%m')
        ORDER BY month DESC
    </select>

    <!-- 查询交期分析数据 -->
    <select id="selectLeadTimeAnalysis" resultType="java.util.Map">
        SELECT 
            p.product_name,
            COUNT(po.id) as totalOrders,
            AVG(CASE WHEN po.actual_end_date IS NOT NULL AND po.start_date IS NOT NULL 
                THEN DATEDIFF(po.actual_end_date, po.start_date) 
                ELSE NULL END) as avgLeadTime,
            AVG(CASE WHEN po.end_date IS NOT NULL AND po.start_date IS NOT NULL 
                THEN DATEDIFF(po.end_date, po.start_date) 
                ELSE NULL END) as plannedLeadTime,
            SUM(CASE WHEN po.actual_end_date IS NOT NULL AND po.end_date IS NOT NULL AND po.actual_end_date &lt;= po.end_date THEN 1 ELSE 0 END) as onTimeOrders,
            ROUND(SUM(CASE WHEN po.actual_end_date IS NOT NULL AND po.end_date IS NOT NULL AND po.actual_end_date &lt;= po.end_date THEN 1 ELSE 0 END) * 100.0 / NULLIF(COUNT(po.id), 0), 2) as onTimeRate,
            AVG(CASE WHEN po.actual_end_date IS NOT NULL AND po.end_date IS NOT NULL 
                THEN DATEDIFF(po.actual_end_date, po.end_date) 
                ELSE NULL END) as avgDelay,
            MAX(CASE WHEN po.actual_end_date IS NOT NULL AND po.end_date IS NOT NULL 
                THEN DATEDIFF(po.actual_end_date, po.end_date) 
                ELSE NULL END) as maxDelay
        FROM production_order po
        LEFT JOIN product p ON po.product_id = p.id
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND po.start_date &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND po.end_date &lt;= #{endDate}
        </if>
        <if test="productId != null">
            AND po.product_id = #{productId}
        </if>
        GROUP BY p.id, p.product_name
        ORDER BY avgLeadTime DESC
    </select>

    <!-- 查询客户满意度数据 -->
    <select id="selectCustomerSatisfaction" resultType="java.util.Map">
        SELECT 
            c.customer_name,
            COUNT(po.id) as totalOrders,
            SUM(CASE WHEN po.order_status = 3 THEN 1 ELSE 0 END) as completedOrders,
            SUM(CASE WHEN po.actual_end_date IS NOT NULL AND po.end_date IS NOT NULL AND po.actual_end_date &lt;= po.end_date THEN 1 ELSE 0 END) as onTimeOrders,
            ROUND(SUM(CASE WHEN po.actual_end_date IS NOT NULL AND po.end_date IS NOT NULL AND po.actual_end_date &lt;= po.end_date THEN 1 ELSE 0 END) * 100.0 / NULLIF(COUNT(po.id), 0), 2) as onTimeRate,
            ROUND(SUM(po.qualified_quantity) * 100.0 / NULLIF(SUM(po.completed_quantity), 0), 2) as qualityRate,
            -- 假设客户满意度评分数据
            AVG(CASE WHEN cf.satisfaction_score IS NOT NULL THEN cf.satisfaction_score ELSE 4.0 END) as avgSatisfactionScore,
            COUNT(CASE WHEN cf.complaint_type IS NOT NULL THEN 1 END) as complaintCount,
            -- 客户满意度等级
            CASE 
                WHEN AVG(CASE WHEN cf.satisfaction_score IS NOT NULL THEN cf.satisfaction_score ELSE 4.0 END) &gt;= 4.5 THEN 'EXCELLENT'
                WHEN AVG(CASE WHEN cf.satisfaction_score IS NOT NULL THEN cf.satisfaction_score ELSE 4.0 END) &gt;= 4.0 THEN 'GOOD'
                WHEN AVG(CASE WHEN cf.satisfaction_score IS NOT NULL THEN cf.satisfaction_score ELSE 4.0 END) &gt;= 3.0 THEN 'AVERAGE'
                ELSE 'POOR'
            END as satisfactionLevel
        FROM production_order po
        LEFT JOIN customer c ON po.customer_id = c.id
        LEFT JOIN customer_feedback cf ON po.id = cf.production_order_id
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND po.start_date &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND po.end_date &lt;= #{endDate}
        </if>
        <if test="customerId != null">
            AND po.customer_id = #{customerId}
        </if>
        GROUP BY c.id, c.customer_name
        ORDER BY avgSatisfactionScore DESC
    </select>

    <!-- 查询准时交货数据 -->
    <select id="selectOnTimeDelivery" resultType="java.util.Map">
        SELECT 
            DATE_FORMAT(po.end_date, '%Y-%m') as month,
            COUNT(po.id) as totalOrders,
            SUM(CASE WHEN po.actual_end_date IS NOT NULL AND po.actual_end_date &lt;= po.end_date THEN 1 ELSE 0 END) as onTimeOrders,
            ROUND(SUM(CASE WHEN po.actual_end_date IS NOT NULL AND po.actual_end_date &lt;= po.end_date THEN 1 ELSE 0 END) * 100.0 / NULLIF(COUNT(po.id), 0), 2) as onTimeRate,
            SUM(CASE WHEN po.actual_end_date IS NOT NULL AND po.actual_end_date > po.end_date THEN 1 ELSE 0 END) as delayedOrders,
            AVG(CASE WHEN po.actual_end_date IS NOT NULL AND po.actual_end_date > po.end_date 
                THEN DATEDIFF(po.actual_end_date, po.end_date) 
                ELSE 0 END) as avgDelayDays,
            SUM(po.completed_quantity) as totalDelivered,
            SUM(po.qualified_quantity) as totalQualified,
            ROUND(SUM(po.qualified_quantity) * 100.0 / NULLIF(SUM(po.completed_quantity), 0), 2) as qualityRate
        FROM production_order po
        WHERE po.order_status = 3
        <if test="startDate != null and startDate != ''">
            AND po.end_date &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND po.end_date &lt;= #{endDate}
        </if>
        <if test="customerId != null">
            AND po.customer_id = #{customerId}
        </if>
        GROUP BY DATE_FORMAT(po.end_date, '%Y-%m')
        ORDER BY month DESC
    </select>

   <!-- 获取交期分析数据 -->
    <select id="selectDeliveryAnalysisData" resultType="java.util.Map">
        SELECT 
            COUNT(*) as totalOrders,
            SUM(CASE WHEN actual_end_date IS NOT NULL AND actual_end_date &lt;= end_date THEN 1 ELSE 0 END) as onTimeOrders,
            SUM(CASE WHEN actual_end_date IS NOT NULL AND actual_end_date > end_date THEN 1 ELSE 0 END) as delayedOrders,
            AVG(CASE WHEN actual_end_date IS NOT NULL AND end_date IS NOT NULL 
                THEN TIMESTAMPDIFF(DAY, end_date, actual_end_date) 
                ELSE NULL END) as avgDelayDays,
            MAX(CASE WHEN actual_end_date IS NOT NULL AND end_date IS NOT NULL 
                THEN TIMESTAMPDIFF(DAY, end_date, actual_end_date) 
                ELSE 0 END) as maxDelayDays
        FROM production_order
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND start_date &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND end_date &lt;= #{endDate}
        </if>
        <if test="productId != null">
            AND product_id = #{productId}
        </if>
    </select>

    <!-- 获取准时交货分析数据 -->
    <select id="selectOnTimeDeliveryData" resultType="java.util.Map">
        SELECT 
            DATE(end_date) as deliveryDate,
            COUNT(*) as totalOrders,
            SUM(CASE WHEN actual_end_date IS NOT NULL AND actual_end_date &lt;= end_date THEN 1 ELSE 0 END) as onTimeOrders,
            ROUND(SUM(CASE WHEN actual_end_date IS NOT NULL AND actual_end_date &lt;= end_date THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as onTimeRate
        FROM production_order
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND start_date &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND end_date &lt;= #{endDate}
        </if>
        <if test="productId != null">
            AND product_id = #{productId}
        </if>
        GROUP BY DATE(end_date)
        ORDER BY DATE(end_date)
    </select>



</mapper>