<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chennian.storytelling.dao.manufacturing.WorkOrderMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.chennian.storytelling.bean.model.manufacturing.WorkOrder">
        <id column="work_order_id" property="workOrderId" />
        <result column="work_order_code" property="workOrderCode" />
        <result column="work_order_name" property="workOrderName" />
        <result column="production_order_id" property="productionOrderId" />
        <result column="production_order_code" property="productionOrderCode" />
        <result column="product_id" property="productId" />
        <result column="product_name" property="productName" />
        <result column="product_spec" property="productSpec" />
        <result column="process_name" property="processName" />
        <result column="process_code" property="processCode" />
        <result column="work_order_quantity" property="workOrderQuantity" />
        <result column="completed_quantity" property="completedQuantity" />
        <result column="qualified_quantity" property="qualifiedQuantity" />
        <result column="unqualified_quantity" property="unqualifiedQuantity" />
        <result column="plan_start_time" property="planStartTime" />
        <result column="plan_end_time" property="planEndTime" />
        <result column="actual_start_time" property="actualStartTime" />
        <result column="actual_end_time" property="actualEndTime" />
        <result column="work_order_status" property="workOrderStatus" />
        <result column="priority" property="priority" />
        <result column="production_line_id" property="productionLineId" />
        <result column="production_line_name" property="productionLineName" />
        <result column="equipment_id" property="equipmentId" />
        <result column="equipment_name" property="equipmentName" />
        <result column="operator_id" property="operatorId" />
        <result column="operator_name" property="operatorName" />
        <result column="plan_work_hours" property="planWorkHours" />
        <result column="actual_work_hours" property="actualWorkHours" />
        <result column="standard_work_hours" property="standardWorkHours" />
        <result column="work_hour_efficiency" property="workHourEfficiency" />
        <result column="plan_cost" property="planCost" />
        <result column="actual_cost" property="actualCost" />
        <result column="progress" property="progress" />
        <result column="quality_requirement" property="qualityRequirement" />
        <result column="process_requirement" property="processRequirement" />
        <result column="technical_requirement" property="technicalRequirement" />
        <result column="safety_requirement" property="safetyRequirement" />
        <result column="assign_time" property="assignTime" />
        <result column="assigner_id" property="assignerId" />
        <result column="assigner_name" property="assignerName" />
        <result column="description" property="description" />
        <result column="remark" property="remark" />
        <result column="create_by" property="createBy" />
        <result column="create_time" property="createTime" />
        <result column="update_by" property="updateBy" />
        <result column="update_time" property="updateTime" />
        <result column="del_flag" property="delFlag" />
    </resultMap>

    <!-- 开始工单 -->
    <update id="startWorkOrder">
        UPDATE work_order
        SET work_status = 1,
            actual_start_time = NOW(),
            update_time = NOW()
        WHERE work_order_id = #{id}
    </update>

    <!-- 暂停工单 -->
    <update id="pauseWorkOrder">
        UPDATE work_order
        SET work_status = 2,
            update_time = NOW()
        WHERE work_order_id = #{id}
    </update>

    <!-- 完成工单 -->
    <update id="completeWorkOrder">
        UPDATE work_order
        SET work_status = 3,
            actual_end_time = NOW(),
            completed_quantity = #{completedQuantity},
            qualified_quantity = #{qualifiedQuantity},
            update_time = NOW()
        WHERE work_order_id = #{id}
    </update>
    
    <!-- 更新工单状态 -->
    <update id="updateOrderStatus">
        UPDATE work_order
        SET work_status = #{status},
            update_time = NOW()
        WHERE work_order_id = #{orderId}
    </update>
    
    <!-- 根据状态查询工单列表 -->
    <select id="selectByStatus" resultMap="BaseResultMap">
        SELECT * FROM work_order 
        WHERE work_status = #{status}
        ORDER BY priority DESC, create_time DESC
    </select>
    
    <!-- 根据生产线ID查询工单列表 -->
    <select id="selectByLineId" resultMap="BaseResultMap">
        SELECT * FROM work_order 
        WHERE production_line_id = #{lineId}
        ORDER BY create_time DESC
    </select>
    
    <!-- 根据产品ID查询工单列表 -->
    <select id="selectByProductId" resultMap="BaseResultMap">
        SELECT wo.* FROM work_order wo
        LEFT JOIN production_order po ON wo.production_order_id = po.id
        WHERE po.product_id = #{productId}
        ORDER BY wo.create_time DESC
    </select>
    
    <!-- 查询工单统计信息 -->
    <select id="selectOrderStatistics" resultType="java.util.Map">
        SELECT 
            COUNT(*) as totalOrders,
            COUNT(CASE WHEN work_status = 0 THEN 1 END) as pendingOrders,
            COUNT(CASE WHEN work_status = 1 THEN 1 END) as inProgressOrders,
            COUNT(CASE WHEN work_status = 2 THEN 1 END) as pausedOrders,
            COUNT(CASE WHEN work_status = 3 THEN 1 END) as completedOrders,
            COUNT(CASE WHEN work_status = 4 THEN 1 END) as cancelledOrders,
            SUM(planned_quantity) as totalPlannedQuantity,
            SUM(completed_quantity) as totalCompletedQuantity,
            SUM(qualified_quantity) as totalQualifiedQuantity,
            ROUND(SUM(completed_quantity) * 100.0 / NULLIF(SUM(planned_quantity), 0), 2) as overallCompletionRate,
            ROUND(SUM(qualified_quantity) * 100.0 / NULLIF(SUM(completed_quantity), 0), 2) as overallQualityRate,
            COUNT(CASE WHEN actual_end_time &lt;= end_time THEN 1 END) as onTimeOrders,
            ROUND(COUNT(CASE WHEN actual_end_time &lt;= end_time THEN 1 END) * 100.0 / NULLIF(COUNT(CASE WHEN actual_end_time IS NOT NULL THEN 1 END), 0), 2) as onTimeRate,
            AVG(CASE WHEN actual_end_time IS NOT NULL AND actual_start_time IS NOT NULL 
                THEN TIMESTAMPDIFF(HOUR, actual_start_time, actual_end_time) 
                ELSE NULL END) as avgCycleTime
        FROM work_order
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND start_time &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND end_time &lt;= #{endDate}
        </if>
    </select>
    
    <!-- 查询生产数据 -->
    <select id="selectProductionData" resultType="java.util.Map">
        SELECT 
            pl.id as lineId,
            pl.line_name as lineName,
            COUNT(wo.id) as orderCount,
            SUM(wo.planned_quantity) as totalPlanned,
            SUM(wo.completed_quantity) as totalCompleted,
            SUM(wo.qualified_quantity) as totalQualified,
            ROUND(SUM(wo.completed_quantity) * 100.0 / NULLIF(SUM(wo.planned_quantity), 0), 2) as completionRate,
            ROUND(SUM(wo.qualified_quantity) * 100.0 / NULLIF(SUM(wo.completed_quantity), 0), 2) as qualityRate,
            AVG(CASE WHEN wo.actual_end_time IS NOT NULL AND wo.actual_start_time IS NOT NULL 
                THEN TIMESTAMPDIFF(HOUR, wo.actual_start_time, wo.actual_end_time) 
                ELSE NULL END) as avgCycleTime,
            COUNT(CASE WHEN wo.actual_end_time &lt;= wo.end_time THEN 1 END) as onTimeCount,
            ROUND(COUNT(CASE WHEN wo.actual_end_time &lt;= wo.end_time THEN 1 END) * 100.0 / NULLIF(COUNT(wo.id), 0), 2) as onTimeRate
        FROM work_order wo
        LEFT JOIN production_line pl ON wo.production_line_id = pl.id
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND wo.start_time &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND wo.end_time &lt;= #{endDate}
        </if>
        <if test="lineId != null">
            AND wo.production_line_id = #{lineId}
        </if>
        GROUP BY pl.id, pl.line_name
        ORDER BY completionRate DESC
    </select>
    
    <!-- 查询质量数据 -->
    <select id="selectQualityData" resultType="java.util.Map">
        SELECT 
            wo.id as workOrderId,
            wo.work_order_code,
            wo.work_order_name,
            wo.completed_quantity,
            wo.qualified_quantity,
            ROUND(wo.qualified_quantity * 100.0 / NULLIF(wo.completed_quantity, 0), 2) as qualityRate,
            COUNT(DISTINCT qi.id) as issueCount,
            COUNT(CASE WHEN qi.severity = 'HIGH' THEN 1 END) as highSeverityIssues,
            COUNT(CASE WHEN qi.severity = 'MEDIUM' THEN 1 END) as mediumSeverityIssues,
            COUNT(CASE WHEN qi.severity = 'LOW' THEN 1 END) as lowSeverityIssues,
            pl.line_name as productionLineName,
            u.real_name as operatorName
        FROM work_order wo
        LEFT JOIN quality_issue qi ON wo.id = qi.work_order_id
        LEFT JOIN production_line pl ON wo.production_line_id = pl.id
        LEFT JOIN user u ON wo.operator_id = u.id
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND wo.start_time &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND wo.end_time &lt;= #{endDate}
        </if>
        <if test="lineId != null">
            AND wo.production_line_id = #{lineId}
        </if>
        <if test="operatorId != null">
            AND wo.operator_id = #{operatorId}
        </if>
        GROUP BY wo.id, wo.work_order_code, wo.work_order_name, wo.completed_quantity, 
                 wo.qualified_quantity, pl.line_name, u.real_name
        ORDER BY qualityRate ASC
    </select>
    
    <!-- 查询资源分配数据 -->
    <select id="selectResourceAllocationData" resultType="java.util.Map">
        SELECT 
            wo.id as workOrderId,
            wo.work_order_code,
            wo.work_order_name,
            pl.line_name as productionLineName,
            e.equipment_name,
            u.real_name as operatorName,
            wo.planned_quantity,
            wo.completed_quantity,
            wo.work_status,
            wo.start_time,
            wo.end_time,
            wo.actual_start_time,
            wo.actual_end_time,
            CASE WHEN wo.actual_end_time IS NOT NULL AND wo.actual_start_time IS NOT NULL 
                THEN TIMESTAMPDIFF(HOUR, wo.actual_start_time, wo.actual_end_time) 
                ELSE NULL END as actualDuration,
            CASE WHEN wo.end_time IS NOT NULL AND wo.start_time IS NOT NULL 
                THEN TIMESTAMPDIFF(HOUR, wo.start_time, wo.end_time) 
                ELSE NULL END as plannedDuration
        FROM work_order wo
        LEFT JOIN production_line pl ON wo.production_line_id = pl.id
        LEFT JOIN equipment e ON wo.equipment_id = e.id
        LEFT JOIN user u ON wo.operator_id = u.id
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND wo.start_time &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND wo.end_time &lt;= #{endDate}
        </if>
        <if test="lineId != null">
            AND wo.production_line_id = #{lineId}
        </if>
        <if test="operatorId != null">
            AND wo.operator_id = #{operatorId}
        </if>
        ORDER BY wo.start_time
    </select>
    
    <!-- 查询效率数据 -->
    <select id="selectEfficiencyData" resultType="java.util.Map">
        SELECT 
            u.id as operatorId,
            u.real_name as operatorName,
            pl.line_name as productionLineName,
            COUNT(wo.id) as totalOrders,
            SUM(wo.completed_quantity) as totalOutput,
            SUM(wo.qualified_quantity) as totalQualified,
            ROUND(SUM(wo.qualified_quantity) * 100.0 / NULLIF(SUM(wo.completed_quantity), 0), 2) as qualityRate,
            AVG(CASE WHEN wo.actual_end_time IS NOT NULL AND wo.actual_start_time IS NOT NULL 
                THEN TIMESTAMPDIFF(HOUR, wo.actual_start_time, wo.actual_end_time) 
                ELSE NULL END) as avgCycleTime,
            ROUND(SUM(wo.completed_quantity) / NULLIF(SUM(CASE WHEN wo.actual_end_time IS NOT NULL AND wo.actual_start_time IS NOT NULL 
                THEN TIMESTAMPDIFF(HOUR, wo.actual_start_time, wo.actual_end_time) 
                ELSE 0 END), 0), 2) as productivity,
            COUNT(CASE WHEN wo.actual_end_time &lt;= wo.end_time THEN 1 END) as onTimeOrders,
            ROUND(COUNT(CASE WHEN wo.actual_end_time &lt;= wo.end_time THEN 1 END) * 100.0 / NULLIF(COUNT(wo.id), 0), 2) as onTimeRate
        FROM work_order wo
        LEFT JOIN user u ON wo.operator_id = u.id
        LEFT JOIN production_line pl ON wo.production_line_id = pl.id
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND wo.start_time &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND wo.end_time &lt;= #{endDate}
        </if>
        <if test="operatorId != null">
            AND wo.operator_id = #{operatorId}
        </if>
        <if test="lineId != null">
            AND wo.production_line_id = #{lineId}
        </if>
        GROUP BY u.id, u.real_name, pl.line_name
        ORDER BY productivity DESC
    </select>
    
    <!-- 查询趋势数据 -->
    <select id="selectTrendData" resultType="java.util.Map">
        SELECT 
            <choose>
                <when test="granularity == 'day'">
                    DATE(start_time) as period
                </when>
                <when test="granularity == 'week'">
                    CONCAT(YEAR(start_time), '-W', WEEK(start_time)) as period
                </when>
                <when test="granularity == 'month'">
                    DATE_FORMAT(start_time, '%Y-%m') as period
                </when>
                <otherwise>
                    DATE_FORMAT(start_time, '%Y-%m') as period
                </otherwise>
            </choose>,
            COUNT(*) as orderCount,
            SUM(planned_quantity) as totalPlanned,
            SUM(completed_quantity) as totalCompleted,
            SUM(qualified_quantity) as totalQualified,
            ROUND(SUM(completed_quantity) * 100.0 / NULLIF(SUM(planned_quantity), 0), 2) as completionRate,
            ROUND(SUM(qualified_quantity) * 100.0 / NULLIF(SUM(completed_quantity), 0), 2) as qualityRate,
            COUNT(CASE WHEN work_status = 3 THEN 1 END) as completedOrders,
            COUNT(CASE WHEN actual_end_time &lt;= end_time THEN 1 END) as onTimeOrders,
            ROUND(COUNT(CASE WHEN actual_end_time &lt;= end_time THEN 1 END) * 100.0 / NULLIF(COUNT(*), 0), 2) as onTimeRate
        FROM work_order
        WHERE 1=1
        <if test="period != null and period != ''">
            <choose>
                <when test="period == 'last_7_days'">
                    AND start_time &gt;= DATE_SUB(NOW(), INTERVAL 7 DAY)
                </when>
                <when test="period == 'last_30_days'">
                    AND start_time &gt;= DATE_SUB(NOW(), INTERVAL 30 DAY)
                </when>
                <when test="period == 'last_90_days'">
                    AND start_time &gt;= DATE_SUB(NOW(), INTERVAL 90 DAY)
                </when>
                <when test="period == 'this_year'">
                    AND YEAR(start_time) = YEAR(NOW())
                </when>
            </choose>
        </if>
        GROUP BY period
        ORDER BY period
    </select>
    


    <!-- 获取人员效率统计数据 -->
    <select id="selectPersonnelEfficiencyData" resultType="java.util.Map">
        SELECT 
            u.id as operatorId,
            u.username as operatorName,
            u.real_name as operatorRealName,
            COUNT(wo.id) as totalWorkOrders,
            SUM(wo.completed_quantity) as totalOutput,
            SUM(wo.qualified_quantity) as totalQualified,
            AVG(CASE WHEN wo.actual_end_time IS NOT NULL AND wo.actual_start_time IS NOT NULL 
                THEN TIMESTAMPDIFF(MINUTE, wo.actual_start_time, wo.actual_end_time) 
                ELSE NULL END) as avgWorkTime,
            ROUND(AVG(CASE WHEN wo.completed_quantity &gt; 0 AND wo.qualified_quantity &gt; 0 
                THEN (wo.qualified_quantity * 100.0 / wo.completed_quantity) 
                ELSE 0 END), 2) as avgQualityRate,
            ROUND(SUM(wo.completed_quantity) / NULLIF(SUM(CASE WHEN wo.actual_end_time IS NOT NULL AND wo.actual_start_time IS NOT NULL 
                THEN TIMESTAMPDIFF(HOUR, wo.actual_start_time, wo.actual_end_time) 
                ELSE 0 END), 0), 2) as productivity
        FROM work_order wo
        LEFT JOIN user u ON wo.operator_id = u.id
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND wo.start_time &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND wo.end_time &lt;= #{endDate}
        </if>
        <if test="operatorId != null">
            AND wo.operator_id = #{operatorId}
        </if>
        GROUP BY u.id, u.username, u.real_name
        ORDER BY productivity DESC
    </select>

    <!-- 获取工作流程数据 -->
    <select id="selectWorkflowData" resultType="java.util.Map">
        SELECT 
            p.process_name,
            p.id as processId,
            COUNT(wo.id) as totalWorkOrders,
            SUM(wo.completed_quantity) as totalOutput,
            AVG(CASE WHEN wo.actual_end_time IS NOT NULL AND wo.actual_start_time IS NOT NULL 
                THEN TIMESTAMPDIFF(MINUTE, wo.actual_start_time, wo.actual_end_time) 
                ELSE NULL END) as avgProcessTime,
            SUM(CASE WHEN wo.work_status = 3 THEN 1 ELSE 0 END) as completedOrders,
            ROUND(SUM(CASE WHEN wo.work_status = 3 THEN 1 ELSE 0 END) * 100.0 / COUNT(wo.id), 2) as completionRate
        FROM work_order wo
        LEFT JOIN process p ON wo.process_id = p.id
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND wo.start_time &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND wo.end_time &lt;= #{endDate}
        </if>
        <if test="processId != null">
            AND wo.process_id = #{processId}
        </if>
        GROUP BY p.id, p.process_name
        ORDER BY totalOutput DESC
    </select>

    <!-- 获取沟通数据 -->
    <select id="selectCommunicationData" resultType="java.util.Map">
        SELECT 
            wo.id as workOrderId,
            wo.work_order_code,
            wo.work_order_name,
            u.real_name as operatorName,
            pl.line_name as productionLineName,
            COUNT(DISTINCT wl.id) as logCount,
            COUNT(DISTINCT qi.id) as issueCount,
            AVG(CASE WHEN wo.actual_end_time IS NOT NULL AND wo.actual_start_time IS NOT NULL 
                THEN TIMESTAMPDIFF(MINUTE, wo.actual_start_time, wo.actual_end_time) 
                ELSE NULL END) as avgResponseTime
        FROM work_order wo
        LEFT JOIN user u ON wo.operator_id = u.id
        LEFT JOIN production_line pl ON wo.production_line_id = pl.id
        LEFT JOIN work_order_log wl ON wo.id = wl.work_order_id
        LEFT JOIN quality_issue qi ON wo.id = qi.work_order_id
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND wo.start_time &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND wo.end_time &lt;= #{endDate}
        </if>
        <if test="operatorId != null">
            AND wo.operator_id = #{operatorId}
        </if>
        GROUP BY wo.id, wo.work_order_code, wo.work_order_name, u.real_name, pl.line_name
        ORDER BY wo.create_time DESC
    </select>

    <!-- 获取决策数据 -->
    <select id="selectDecisionData" resultType="java.util.Map">
        SELECT 
            DATE(wo.start_time) as workDate,
            COUNT(wo.id) as totalWorkOrders,
            SUM(wo.completed_quantity) as totalOutput,
            SUM(wo.qualified_quantity) as totalQualified,
            ROUND(AVG(CASE WHEN wo.completed_quantity &gt; 0 AND wo.qualified_quantity &gt; 0 
                THEN (wo.qualified_quantity * 100.0 / wo.completed_quantity) 
                ELSE 0 END), 2) as avgQualityRate,
            SUM(CASE WHEN wo.work_status = 3 THEN 1 ELSE 0 END) as completedOrders,
            ROUND(SUM(CASE WHEN wo.work_status = 3 THEN 1 ELSE 0 END) * 100.0 / COUNT(wo.id), 2) as completionRate,
            AVG(CASE WHEN wo.actual_end_time IS NOT NULL AND wo.actual_start_time IS NOT NULL 
                THEN TIMESTAMPDIFF(MINUTE, wo.actual_start_time, wo.actual_end_time) 
                ELSE NULL END) as avgWorkTime
        FROM work_order wo
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND wo.start_time &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND wo.end_time &lt;= #{endDate}
        </if>
        <if test="productionLineId != null">
            AND wo.production_line_id = #{productionLineId}
        </if>
        GROUP BY DATE(wo.start_time)
        ORDER BY DATE(wo.start_time)
    </select>

    <!-- 获取风险管理数据 -->
    <select id="selectRiskManagementData" resultType="java.util.Map">
        SELECT 
            'DELAY_RISK' as riskType,
            '延期风险' as riskName,
            COUNT(CASE WHEN wo.actual_end_time &gt; wo.end_time OR (wo.work_status IN (0,1,2) AND NOW() &gt; wo.end_time) THEN 1 END) as riskCount,
            COUNT(*) as totalCount,
            ROUND(COUNT(CASE WHEN wo.actual_end_time &gt; wo.end_time OR (wo.work_status IN (0,1,2) AND NOW() &gt; wo.end_time) THEN 1 END) * 100.0 / COUNT(*), 2) as riskRate
        FROM work_order wo
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND wo.start_time &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND wo.end_time &lt;= #{endDate}
        </if>
        
        UNION ALL
        
        SELECT 
            'QUALITY_RISK' as riskType,
            '质量风险' as riskName,
            COUNT(CASE WHEN wo.qualified_quantity &lt; wo.completed_quantity * 0.95 THEN 1 END) as riskCount,
            COUNT(CASE WHEN wo.completed_quantity &gt; 0 THEN 1 END) as totalCount,
            ROUND(COUNT(CASE WHEN wo.qualified_quantity &lt; wo.completed_quantity * 0.95 THEN 1 END) * 100.0 / NULLIF(COUNT(CASE WHEN wo.completed_quantity &gt; 0 THEN 1 END), 0), 2) as riskRate
        FROM work_order wo
        WHERE wo.completed_quantity &gt; 0
        <if test="startDate != null and startDate != ''">
            AND wo.start_time &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND wo.end_time &lt;= #{endDate}
        </if>
        
        UNION ALL
        
        SELECT 
            'EFFICIENCY_RISK' as riskType,
            '效率风险' as riskName,
            COUNT(CASE WHEN wo.completed_quantity &lt; wo.planned_quantity * 0.8 THEN 1 END) as riskCount,
            COUNT(*) as totalCount,
            ROUND(COUNT(CASE WHEN wo.completed_quantity &lt; wo.planned_quantity * 0.8 THEN 1 END) * 100.0 / COUNT(*), 2) as riskRate
        FROM work_order wo
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND wo.start_time &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND wo.end_time &lt;= #{endDate}
        </if>
    </select>

    <!-- 派工 -->
    <update id="assignWorkOrder">
        UPDATE work_order
        SET operator_id = #{operatorId},
            work_status = 1,
            update_time = NOW()
        WHERE work_order_id = #{id}
    </update>

    <!-- 报工 -->
    <update id="reportWorkOrder">
        UPDATE work_order
        SET completed_quantity = #{quantity},
            remark = #{remark},
            actual_end_time = NOW(),
            work_status = 3,
            update_time = NOW()
        WHERE work_order_id = #{id}
    </update>

    <!-- 根据生产订单生成工单 -->
    <insert id="generateWorkOrderFromProductionOrder">
        INSERT INTO work_order (
            production_order_id,
            work_order_code,
            work_order_name,
            product_id,
            planned_quantity,
            work_status,
            start_time,
            end_time,
            create_time,
            update_time
        )
        SELECT 
            po.id,
            CONCAT('WO', DATE_FORMAT(NOW(), '%Y%m%d'), LPAD(FLOOR(RAND() * 10000), 4, '0')),
            CONCAT(po.order_name, '-工单'),
            po.product_id,
            po.planned_quantity,
            0,
            po.start_date,
            po.end_date,
            NOW(),
            NOW()
        FROM production_order po
        WHERE po.id = #{productionOrderId}
    </insert>

    <!-- 查询质量统计数据 -->
    <select id="selectQualityStatistics" resultType="java.util.Map">
        SELECT 
            COUNT(wo.id) as totalWorkOrders,
            SUM(wo.completed_quantity) as totalCompleted,
            SUM(wo.qualified_quantity) as totalQualified,
            SUM(wo.completed_quantity - wo.qualified_quantity) as totalDefective,
            ROUND(SUM(wo.qualified_quantity) * 100.0 / NULLIF(SUM(wo.completed_quantity), 0), 2) as qualificationRate,
            ROUND((SUM(wo.completed_quantity) - SUM(wo.qualified_quantity)) * 100.0 / NULLIF(SUM(wo.completed_quantity), 0), 2) as defectiveRate,
            COUNT(CASE WHEN wo.work_status = 4 THEN 1 END) as failedOrders,
            COUNT(CASE WHEN wo.work_status = 3 THEN 1 END) as completedOrders,
            ROUND(COUNT(CASE WHEN wo.work_status = 3 THEN 1 END) * 100.0 / NULLIF(COUNT(wo.id), 0), 2) as completionRate
        FROM work_order wo
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND wo.start_time &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND wo.end_time &lt;= #{endDate}
        </if>
        <if test="productId != null">
            AND wo.product_id = #{productId}
        </if>
    </select>

    <!-- 查询废料统计数据 -->
    <select id="selectWasteStatistics" resultType="java.util.Map">
        SELECT 
            p.product_name,
            SUM(wo.completed_quantity) as totalProduction,
            SUM(wo.completed_quantity - wo.qualified_quantity) as totalWaste,
            ROUND((SUM(wo.completed_quantity) - SUM(wo.qualified_quantity)) * 100.0 / NULLIF(SUM(wo.completed_quantity), 0), 2) as wasteRate,
            COUNT(wo.id) as workOrderCount,
            AVG(wo.completed_quantity - wo.qualified_quantity) as avgWastePerOrder,
            -- 假设废料成本计算
            SUM((wo.completed_quantity - wo.qualified_quantity) * 10.0) as estimatedWasteCost
        FROM work_order wo
        LEFT JOIN product p ON wo.product_id = p.id
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND wo.start_time &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND wo.end_time &lt;= #{endDate}
        </if>
        <if test="productId != null">
            AND wo.product_id = #{productId}
        </if>
        GROUP BY p.id, p.product_name
        ORDER BY totalWaste DESC
    </select>

    <!-- 查询退货率分析数据 -->
    <select id="selectReturnRateAnalysis" resultType="java.util.Map">
        SELECT 
            p.product_name,
            SUM(wo.qualified_quantity) as totalDelivered,
            -- 假设从客户反馈或质量记录中获取退货数据
            SUM(CASE WHEN qr.return_quantity IS NOT NULL THEN qr.return_quantity ELSE 0 END) as totalReturned,
            ROUND(SUM(CASE WHEN qr.return_quantity IS NOT NULL THEN qr.return_quantity ELSE 0 END) * 100.0 / NULLIF(SUM(wo.qualified_quantity), 0), 2) as returnRate,
            COUNT(DISTINCT qr.id) as returnIncidents,
            AVG(qr.return_quantity) as avgReturnQuantity,
            -- 主要退货原因统计
            GROUP_CONCAT(DISTINCT qr.return_reason) as returnReasons
        FROM work_order wo
        LEFT JOIN product p ON wo.product_id = p.id
        LEFT JOIN quality_record qr ON wo.id = qr.work_order_id AND qr.record_type = 'RETURN'
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND wo.start_time &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND wo.end_time &lt;= #{endDate}
        </if>
        <if test="productId != null">
            AND wo.product_id = #{productId}
        </if>
        GROUP BY p.id, p.product_name
        ORDER BY returnRate DESC
    </select>



    <!-- 查询质量报告数据 -->
    <select id="selectQualityReportData" resultType="java.util.Map">
        SELECT 
            COUNT(*) as total_work_orders,
            SUM(wo.completed_quantity) as total_completed,
            SUM(wo.qualified_quantity) as total_qualified,
            SUM(wo.completed_quantity - wo.qualified_quantity) as total_defective,
            ROUND(SUM(wo.qualified_quantity) * 100.0 / NULLIF(SUM(wo.completed_quantity), 0), 2) as quality_rate,
            COUNT(CASE WHEN wo.work_status = 3 THEN 1 END) as completed_orders,
            AVG(TIMESTAMPDIFF(HOUR, wo.start_time, wo.end_time)) as avg_completion_time
        FROM work_order wo
        WHERE wo.start_time &gt;= #{startDate} 
            AND wo.end_time &lt;= #{endDate}
            AND (#{productId} IS NULL OR wo.product_id = #{productId})
    </select>

    <!-- 更新工单状态 -->
    <update id="updateOrderStatus">
        UPDATE work_order
        SET work_status = #{status},
            update_time = NOW()
        WHERE work_order_id = #{workOrderId}
    </update>

    <!-- 派工 -->
    <update id="assignOperator">
        UPDATE work_order
        SET operator_id = #{operatorId},
            work_status = 1,
            update_time = NOW()
        WHERE work_order_id = #{workOrderId}
    </update>

    <!-- 开工 -->
    <update id="startWork">
        UPDATE work_order
        SET work_status = 2,
            actual_start_time = NOW(),
            update_time = NOW()
        WHERE work_order_id = #{workOrderId}
    </update>

    <!-- 完工 -->
    <update id="completeWork">
        UPDATE work_order
        SET work_status = 3,
            actual_end_time = NOW(),
            update_time = NOW()
        WHERE work_order_id = #{workOrderId}
    </update>

    <!-- 报工 -->
    <update id="reportWork">
        UPDATE work_order
        SET completed_quantity = #{quantity},
            remark = #{remark},
            actual_end_time = NOW(),
            work_status = 3,
            update_time = NOW()
        WHERE work_order_id = #{workOrderId}
    </update>

    <!-- 根据生产订单ID查询工单列表 -->
    <select id="selectByProductionOrderId" resultMap="BaseResultMap">
        SELECT * FROM work_order
        WHERE production_order_id = #{productionOrderId}
        ORDER BY create_time DESC
    </select>

    <!-- 根据操作员ID查询工单 -->
    <select id="selectByOperatorId" resultMap="BaseResultMap">
        SELECT * FROM work_order
        WHERE operator_id = #{operatorId}
        ORDER BY create_time DESC
    </select>

    <!-- 根据生产订单生成工单 -->
    <insert id="generateFromProductionOrder">
        INSERT INTO work_order (
            production_order_id,
            work_order_code,
            work_order_name,
            product_id,
            planned_quantity,
            work_status,
            start_time,
            end_time,
            create_time,
            update_time
        )
        SELECT 
            po.id,
            CONCAT('WO', DATE_FORMAT(NOW(), '%Y%m%d'), LPAD(FLOOR(RAND() * 10000), 4, '0')),
            CONCAT(po.order_name, '-工单'),
            po.product_id,
            po.planned_quantity,
            0,
            po.start_date,
            po.end_date,
            NOW(),
            NOW()
        FROM production_order po
        WHERE po.id = #{productionOrderId}
    </insert>

    <!-- 查询培训数据 -->
    <select id="selectTrainingData" resultType="java.util.Map">
        SELECT 
            u.id as employeeId,
            u.real_name as employeeName,
            COUNT(DISTINCT t.id) as trainingCount,
            SUM(t.training_hours) as totalTrainingHours,
            AVG(t.score) as avgScore,
            COUNT(CASE WHEN t.status = 'COMPLETED' THEN 1 END) as completedTrainings,
            ROUND(COUNT(CASE WHEN t.status = 'COMPLETED' THEN 1 END) * 100.0 / NULLIF(COUNT(t.id), 0), 2) as completionRate
        FROM user u
        LEFT JOIN training_record t ON u.id = t.employee_id
        WHERE 1=1
        <if test="startDate != null and startDate != ''">
            AND t.training_date &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND t.training_date &lt;= #{endDate}
        </if>
        <if test="departmentId != null">
            AND u.department_id = #{departmentId}
        </if>
        GROUP BY u.id, u.real_name
        ORDER BY totalTrainingHours DESC
    </select>

</mapper>