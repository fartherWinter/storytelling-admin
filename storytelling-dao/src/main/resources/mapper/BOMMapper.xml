<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chennian.storytelling.dao.manufacturing.BOMMapper">

    <!-- Bom结果映射 -->
    <resultMap id="BomResult" type="com.chennian.storytelling.bean.model.Bom">
        <id property="bomId" column="bom_id" />
        <result property="bomCode" column="bom_code" />
        <result property="bomName" column="bom_name" />
        <result property="bomVersion" column="bom_version" />
        <result property="bomType" column="bom_type" />
        <result property="bomStatus" column="bom_status" />
        <result property="productId" column="product_id" />
        <result property="productCode" column="product_code" />
        <result property="productName" column="product_name" />
        <result property="productSpec" column="product_spec" />
        <result property="productUnit" column="product_unit" />
        <result property="baseQuantity" column="base_quantity" />
        <result property="batchSize" column="batch_size" />
        <result property="lossRate" column="loss_rate" />
        <result property="routingId" column="routing_id" />
        <result property="routingName" column="routing_name" />
        <result property="lineId" column="line_id" />
        <result property="lineName" column="line_name" />
        <result property="workshopId" column="workshop_id" />
        <result property="workshopName" column="workshop_name" />
        <result property="designDeptId" column="design_dept_id" />
        <result property="designDeptName" column="design_dept_name" />
        <result property="designerId" column="designer_id" />
        <result property="designerName" column="designer_name" />
        <result property="processDeptId" column="process_dept_id" />
        <result property="processDeptName" column="process_dept_name" />
        <result property="processEngineerId" column="process_engineer_id" />
        <result property="processEngineerName" column="process_engineer_name" />
        <result property="reviewerId" column="reviewer_id" />
        <result property="reviewerName" column="reviewer_name" />
        <result property="reviewTime" column="review_time" />
        <result property="publisherId" column="publisher_id" />
        <result property="publisherName" column="publisher_name" />
        <result property="publishTime" column="publish_time" />
        <result property="effectiveDate" column="effective_date" />
        <result property="expiryDate" column="expiry_date" />
        <result property="remark" column="remark" />
        <result property="createBy" column="create_by" />
        <result property="createTime" column="create_time" />
        <result property="updateBy" column="update_by" />
        <result property="updateTime" column="update_time" />
        <result property="version" column="version" />
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="selectBomVo">
        SELECT bom_id, bom_code, bom_name, bom_version, bom_type, bom_status, product_id, product_code, product_name, product_spec, product_unit, base_quantity, batch_size, loss_rate, routing_id, routing_name, line_id, line_name, workshop_id, workshop_name, design_dept_id, design_dept_name, designer_id, designer_name, process_dept_id, process_dept_name, process_engineer_id, process_engineer_name, reviewer_id, reviewer_name, review_time, publisher_id, publisher_name, publish_time, effective_date, expiry_date, remark, create_by, create_time, update_by, update_time, version
        FROM bom
    </sql>

    <!-- updateBomStatus -->
    <update id="updateBomStatus">
        UPDATE bom 
        SET bom_status = #{status},
            update_time = NOW()
        WHERE bom_id = #{bomId}
        AND del_flag = '0'
    </update>

    <!-- selectByProductId -->
    <select id="selectByProductId" resultMap="BomResult">
        <include refid="selectBomVo"/>
        WHERE product_id = #{productId}
        AND del_flag = '0'
        ORDER BY bom_version DESC, create_time DESC
    </select>

    <!-- selectByStatus -->
    <select id="selectByStatus" resultMap="BomResult">
        <include refid="selectBomVo"/>
        WHERE bom_status = #{status}
        AND del_flag = '0'
        ORDER BY create_time DESC
    </select>

    <!-- selectByBomType -->
    <select id="selectByBomType" resultMap="BomResult">
        <include refid="selectBomVo"/>
        WHERE bom_type = #{bomType}
        AND del_flag = '0'
        ORDER BY create_time DESC
    </select>

    <!-- selectBomStatistics -->
    <select id="selectBomStatistics" resultType="java.util.Map">
        SELECT 
            product_id as productId,
            product_name as productName,
            COUNT(*) as bomCount,
            COUNT(CASE WHEN bom_status = 1 THEN 1 END) as activeBomCount,
            COUNT(CASE WHEN bom_status = 2 THEN 1 END) as frozenBomCount,
            COUNT(CASE WHEN bom_status = 3 THEN 1 END) as obsoleteBomCount,
            AVG(CAST(base_quantity AS DECIMAL(10,2))) as avgBaseQuantity,
            AVG(CAST(loss_rate AS DECIMAL(5,2))) as avgLossRate
        FROM bom
        WHERE del_flag = '0'
        <if test="productId != null">
            AND product_id = #{productId}
        </if>
        <if test="startDate != null and startDate != ''">
            AND DATE(create_time) >= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND DATE(create_time) <= #{endDate}
        </if>
        GROUP BY product_id, product_name
        ORDER BY bomCount DESC
    </select>

    <!-- approveBom -->
    <update id="approveBom">
        UPDATE bom 
        SET bom_status = 1,
            reviewer_id = #{reviewerId},
            reviewer_name = #{reviewerName},
            review_time = #{reviewTime},
            update_time = NOW()
        WHERE bom_id = #{bomId}
        AND del_flag = '0'
    </update>

    <!-- publishBom -->
    <update id="publishBom">
        UPDATE bom 
        SET bom_status = 2,
            publisher_id = #{publisherId},
            publisher_name = #{publisherName},
            publish_time = #{publishTime},
            update_time = NOW()
        WHERE bom_id = #{bomId}
        AND del_flag = '0'
    </update>

    <!-- freezeBom -->
    <update id="freezeBom">
        UPDATE bom 
        SET bom_status = 3,
            update_time = NOW()
        WHERE bom_id = #{bomId}
        AND del_flag = '0'
    </update>

    <!-- obsoleteBom -->
    <update id="obsoleteBom">
        UPDATE bom 
        SET bom_status = 4,
            update_time = NOW()
        WHERE bom_id = #{bomId}
        AND del_flag = '0'
    </update>

    <!-- selectBomVersionHistory -->
    <select id="selectBomVersionHistory" resultMap="BomResult">
        <include refid="selectBomVo"/>
        WHERE product_id = #{productId}
        AND bom_code = #{bomCode}
        AND del_flag = '0'
        ORDER BY bom_version DESC, create_time DESC
    </select>

    <!-- selectLatestBomVersion -->
    <select id="selectLatestBomVersion" resultMap="BomResult">
        <include refid="selectBomVo"/>
        WHERE product_id = #{productId}
        AND bom_code = #{bomCode}
        AND del_flag = '0'
        ORDER BY bom_version DESC, create_time DESC
        LIMIT 1
    </select>

    <!-- selectEffectiveBoms -->
    <select id="selectEffectiveBoms" resultMap="BomResult">
        <include refid="selectBomVo"/>
        WHERE product_id = #{productId}
        AND del_flag = '0'
        AND bom_status IN (1, 2)
        AND (effective_date IS NULL OR effective_date <= #{effectiveDate})
        AND (expiry_date IS NULL OR expiry_date >= #{effectiveDate})
        ORDER BY bom_version DESC, create_time DESC
    </select>

    <!-- selectProductInnovationData -->
    <select id="selectProductInnovationData" resultType="java.util.Map">
        SELECT 
            product_id as productId,
            product_name as productName,
            COUNT(*) as totalBomCount,
            COUNT(DISTINCT bom_version) as versionCount,
            MAX(bom_version) as latestVersion,
            COUNT(CASE WHEN bom_status = 1 THEN 1 END) as activeBomCount,
            AVG(DATEDIFF(publish_time, create_time)) as avgDevelopmentDays,
            COUNT(CASE WHEN DATE(create_time) >= #{startDate} THEN 1 END) as newBomCount
        FROM bom
        WHERE del_flag = '0'
        <if test="productId != null">
            AND product_id = #{productId}
        </if>
        <if test="startDate != null and startDate != ''">
            AND DATE(create_time) >= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND DATE(create_time) <= #{endDate}
        </if>
        GROUP BY product_id, product_name
        ORDER BY newBomCount DESC, totalBomCount DESC
    </select>

</mapper>